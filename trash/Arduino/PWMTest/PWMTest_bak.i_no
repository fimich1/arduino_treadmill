int ledPin = 13;                 // светодиод подключен на порт 13
int clockPin = 12;
int resetPin = 11;
int analogPin = A0;
int analogValue = 0;
int clockValue = 0; 
int lastmillis = 0;
volatile int rpmCounter = 0;
int rpmValue = 0;

void setup()
{
  pinMode(ledPin, OUTPUT);      // устанавливается режим порта - выход
  pinMode(clockPin, OUTPUT);
  pinMode(resetPin, OUTPUT);
  Serial.begin(9600);
  attachInterrupt(0, rpm_fan, FALLING);
}

void rpm_fan()
{
  rpmCounter++;
}

void resetNumber()
{
    // Для сброса на мгновение ставим контакт
    // reset в HIGH и возвращаем обратно в LOW
    digitalWrite(resetPin, HIGH);
    digitalWrite(resetPin, LOW);
}

void showNumber(int n)
{

    if (n != clockValue) {
      clockValue = n;
      // Первым делом обнуляем текущее значение
      resetNumber();
  
      // Далее быстро «прокликиваем» счётчик до нужного
      // значения
      while (n--) {
          digitalWrite(clockPin, HIGH);
          digitalWrite(clockPin, LOW);
      }

    }
}


void loop()
{

  if (millis() - lastmillis >= 1000){ /*Uptade every one second, this will be equal to reading frecuency (Hz).*/
    detachInterrupt(0); //Disable interrupt when calculating
    rpmValue = rpmCounter; /* Convert frecuency to RPM, note: this works for one interruption per full rotation. For two interrups per full rotation use rpmcount * 30.*/

    showNumber(rpmValue*60);

    rpmCounter = 0; // Restart the RPM counter
    lastmillis = millis(); // Uptade lasmillis
    attachInterrupt(0, rpm_fan, FALLING); //enable interrupt
  }

  analogValue = analogRead(analogPin);
  Serial.println(String(analogValue));
  analogWrite(3, map(analogValue, 0, 1023, 0, 255));
  //showNumber(analogValue);
  //delay(100);
}

/*
int sensorPin = A0;    // select the input pin for the potentiometer
int ledPin = 13;      // select the pin for the LED
int sensorValue = 0;  // variable to store the value coming from the sensor

void setup() {
  pinMode(ledPin, OUTPUT);
}

void loop() {
  // read the value from the sensor:
  sensorValue = analogRead(sensorPin);
  // turn the ledPin on
  digitalWrite(ledPin, HIGH);
  // stop the program for <sensorValue> milliseconds:
  delay(500);
  // turn the ledPin off:
  digitalWrite(ledPin, LOW);
  // stop the program for for <sensorValue> milliseconds:
  delay(sensorValue);
}
*/